-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),NumericTimes(Sym(2),Sym(1)))
TP(Sym(4),NumericTimes(Sym(1),Sym(3)))
TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),OrderingGT(Sym(8),Const(50)))
TP(Sym(10),BooleanNegate(Sym(9)))
TP(Sym(11),NumericPlus(Sym(8),Const(2)))
TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11)))))
TP(Sym(13),ArrayLength(Sym(12)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(15),ArrayIndex(Sym(5),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14))))
TP(Sym(17),Reify(Sym(16),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14), Sym(16))))

-- before transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x6 = x5.length
var x12 = new ArrayBuilder[Int]
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x9 = x8 > 50
val x10 = !x9
val x11 = x8 + 2
if (x10) x12 += x11
}
val x13 = x12.length
val x14 = println(x13)
val x15 = x5.apply(0)
val x16 = println(x15)

-- vertical transformation

(VFT) No producers found for TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))

(VFT) Fusing consumer TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11))))) with real producer: Sym(5)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(4).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) all vertically fused: List(Sym(21), Sym(5))

-- after vertical transformation
var x21 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
val x18 = x4 + 2
val x19 = x4 > 50
val x20 = !x19
if (x20) x21 += x18
}
val x22 = x21.length
val x23 = println(x22)
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x15 = x5.apply(0)
val x24 = println(x15)

-- horizontal transformation
(HFT) Recording Sym(21), no fusion
(HFT) Fusing Sym(5) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(21), Sym(5)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(21), Sym(5))

-- after horizontal transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x15 = x5.apply(0)
var x21 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
val x18 = x4 + 2
val x19 = x4 > 50
val x20 = !x19
if (x20) x21 += x18
}
val x22 = x21.length
val x23 = println(x22)
val x24 = println(x15)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(21)),List(SimpleLoop(Const(100),Sym(1),ArrayIfElem(Sym(20),Block(Sym(18))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayIfElem(Sym(20),Block(Sym(18))))))
TTP(List(Sym(5)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(4))))))

var x21 = new ArrayBuilder[Int]
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
val x18 = x4 + 2
val x19 = x4 > 50
val x20 = !x19
if (x20) x21 += x18
x5(x1) = x4
}
val x15 = x5.apply(0)
val x22 = x21.length
val x23 = println(x22)
val x24 = println(x15)
-- done
