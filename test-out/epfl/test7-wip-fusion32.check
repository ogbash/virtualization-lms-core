-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(10)))
TP(Sym(3),OrderingGT(Sym(2),Const(0)))
TP(Sym(4),SimpleLoop(Sym(0),Sym(1),ArrayIfElem(Sym(3),Block(Sym(1)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),Reflect(Print(Sym(5)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),ArrayLength(Sym(4)))
TP(Sym(9),ArrayIndex(Sym(4),Sym(8)))
TP(Sym(10),NumericPlus(Sym(9),Const(2)))
TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayIndex(Sym(11),Const(0)))
TP(Sym(13),Reflect(Print(Sym(12)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(14),Reify(Sym(13),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(6), Sym(13))))

-- before transformation
var x4 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
if (x3) x4 += x1
}
val x5 = x4.apply(0)
val x6 = println(x5)
val x7 = x4.length
var x11 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x4.apply(x8)
val x10 = x9 + 2
x11(x8) = x10
}
val x12 = x11.apply(0)
val x13 = println(x12)

-- vertical transformation

(VFT) No producers found for TP(Sym(4),SimpleLoop(Sym(0),Sym(1),ArrayIfElem(Sym(3),Block(Sym(1)))))

(VFT) Fusing consumer TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10))))) with real producer: Sym(4)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(1).
(VFT) SimpleCollectIf+SimpleCollect fusion: use producer loop with consumer body.

(VFT) all vertically fused: List(Sym(4), Sym(16))

-- after vertical transformation
var x4 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
if (x3) x4 += x1
}
val x5 = x4.apply(0)
val x6 = println(x5)
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
val x15 = x1 + 2
if (x3) x16 += x15
}
val x17 = x16.apply(0)
val x18 = println(x17)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(16) with containing fusion set FusedSet(shape = Sym(0), indexSym = Sym(1), loopSyms = List(Sym(4), Sym(16)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(4), Sym(16))

-- after horizontal transformation
var x4 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
if (x3) x4 += x1
}
val x5 = x4.apply(0)
val x6 = println(x5)
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
val x15 = x1 + 2
if (x3) x16 += x15
}
val x17 = x16.apply(0)
val x18 = println(x17)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Sym(0),Sym(1),ArrayIfElem(Sym(3),Block(Sym(1))))),SimpleFatLoop(Sym(0),Sym(1),List(ArrayIfElem(Sym(3),Block(Sym(1))))))
TTP(List(Sym(16)),List(SimpleLoop(Sym(0),Sym(1),ArrayIfElem(Sym(3),Block(Sym(15))))),SimpleFatLoop(Sym(0),Sym(1),List(ArrayIfElem(Sym(3),Block(Sym(15))))))

var x4 = new ArrayBuilder[Int]
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until x0) {
val x2 = x1 + 10
val x3 = x2 > 0
val x15 = x1 + 2
if (x3) x4 += x1
if (x3) x16 += x15
}
val x5 = x4.apply(0)
val x6 = println(x5)
val x17 = x16.apply(0)
val x18 = println(x17)
-- done
