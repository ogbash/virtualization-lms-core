-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayIndex(Sym(3),Const(0)))
TP(Sym(5),Reflect(Print(Sym(4)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),Reflect(Print(Sym(6)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(8),Reify(Const(1),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(7))))
TP(Sym(9),SimpleLoop(Const(100),Sym(6),ArrayElem(Block(Sym(8)))))
TP(Sym(10),Reflect(SimpleLoop(Const(100),Sym(6),ArrayElem(Block(Sym(8)))),Summary(true,false,false,false,false,List(),List(),List(),List()),List(Sym(5))))
TP(Sym(11),ArrayIndex(Sym(10),Const(1)))
TP(Sym(12),Reflect(Print(Sym(11)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10))))
TP(Sym(13),Reify(Sym(12),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10), Sym(12))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
val x10 = LoopArray(100) { x6 => 
val x7 = println(x6)
1
}
val x11 = x10.apply(1)
val x12 = println(x11)

-- vertical transformation
nonflat: List(List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(3): List()
(VFT)  Loop Sym(3) is consumer of 



-- after vertical transformation
val x18 = LoopArray(100) { x14 => 
val x15 = println(x14)
1
}
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
val x19 = LoopArray(100) { x14 => 
val x15 = println(x14)
1
}
val x20 = x19.apply(1)
val x21 = println(x20)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(3)): (Const(100),(Sym(3),Sym(1),None))
error: don't know how to mirror SimpleLoop(Const(100),Sym(14),ArrayElem(Block(Sym(16))))

-- after horizontal transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
val x19 = LoopArray(100) { x14 => 
val x15 = println(x14)
1
}
val x20 = x19.apply(1)
val x21 = println(x20)
val x28 = LoopArray(100) { x24 => 
val x25 = println(x24)
1
}
val x29 = LoopArray(100) { x24 => 
val x25 = println(x24)
1
}
-- done
