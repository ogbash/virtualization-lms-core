-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),NumericPlus(Sym(4),Const(2)))
TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),ArrayIndex(Sym(3),Sym(8)))
TP(Sym(10),ArrayIndex(Sym(6),Sym(8)))
TP(Sym(11),NumericPlus(Sym(9),Sym(10)))
TP(Sym(12),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(11)))))
TP(Sym(13),ArrayIndex(Sym(12),Const(0)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(15),Reify(Sym(14),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14))))

-- before transformation
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x7 = x6.length
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x12 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x3.apply(x8)
val x10 = x6.apply(x8)
val x11 = x9 + x10
x12(x8) = x11
}
val x13 = x12.apply(0)
val x14 = println(x13)

-- vertical transformation
nonflat: List(List((Sym(6),Some(TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))))), List((Sym(5),Some(TP(Sym(5),NumericPlus(Sym(4),Const(2)))))), List((Sym(4),None)))
+++deps of Sym(6): List()
(VFT)  Loop Sym(6) is consumer of 


nonflat: List(List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(3): List()
(VFT)  Loop Sym(3) is consumer of 


nonflat: List(List((Sym(12),Some(TP(Sym(12),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(11)))))))), List((Sym(11),Some(TP(Sym(11),NumericPlus(Sym(9),Sym(10)))))), List((Sym(10),Some(TP(Sym(10),ArrayIndex(Sym(6),Sym(8)))))), List((Sym(9),Some(TP(Sym(9),ArrayIndex(Sym(3),Sym(8)))))), List((Sym(8),None)), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(7),Some(TP(Sym(7),ArrayLength(Sym(6)))))), List((Sym(6),Some(TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))))))
+++deps of Sym(12): List(Sym(3), Sym(6))
(VFT)  Loop Sym(12) is consumer of 
(Sym(6),1)
(Sym(3),2)

+++recording horizontal requirement: Sym(12) -> Sym(6)
fuse with TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
index: subst += (Sym(8) -> Sym(4)) 
prodRes: simpleIndexReplacements += (Sym(10) -> Sym(5)) 
prodRes: simpleIndexReplacements += (Sym(9) -> Sym(5)) 
+++recording horizontal requirement: Sym(12) -> Sym(3)
fuse with TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
index: subst += (Sym(8) -> Sym(1)) 
prodRes: simpleIndexReplacements += (Sym(10) -> Sym(2)) 
prodRes: simpleIndexReplacements += (Sym(9) -> Sym(2)) 
B

-- after vertical transformation
var x17 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x16 = x2 + x2
x17(x1) = x16
}
val x18 = x17.apply(0)
val x19 = println(x18)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(17)): (Const(100),(Sym(17),Sym(1),None))

-- after horizontal transformation
var x17 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x16 = x2 + x2
x17(x1) = x16
}
val x18 = x17.apply(0)
val x19 = println(x18)
-- done
