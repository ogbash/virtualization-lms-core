-- full graph
TP(Sym(3),NumericPlus(Sym(1),Sym(2)))
TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4)))))
TP(Sym(8),NumericPlus(Sym(6),Sym(7)))
TP(Sym(9),NumericPlus(Sym(8),Const(2)))
TP(Sym(10),SimpleLoop(Const(10),Sym(7),ArrayElem(Block(Sym(9)))))
TP(Sym(11),SimpleLoop(Const(30),Sym(6),FlattenElem(Block(Sym(10)))))
TP(Sym(14),NumericPlus(Sym(12),Sym(13)))
TP(Sym(15),NumericPlus(Sym(14),Const(3)))
TP(Sym(16),SimpleLoop(Const(10),Sym(13),ArrayElem(Block(Sym(15)))))
TP(Sym(17),SimpleLoop(Const(30),Sym(12),FlattenElem(Block(Sym(16)))))
TP(Sym(18),ArrayIndex(Sym(5),Const(0)))
TP(Sym(19),Reflect(Print(Sym(18)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(20),ArrayIndex(Sym(11),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19))))
TP(Sym(22),ArrayIndex(Sym(17),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19), Sym(21))))
TP(Sym(24),Reify(Sym(23),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19), Sym(21), Sym(23))))

-- before transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
var x11 = new ArrayBuilder[Int]
for (x6 <- 0 until 30) {
var x10 = new Array[Int](10)
for (x7 <- 0 until 10) {
val x8 = x6 + x7
val x9 = x8 + 2
x10(x7) = x9
}
x11 ++= x10
}
val x20 = x11.apply(0)
val x21 = println(x20)
var x17 = new ArrayBuilder[Int]
for (x12 <- 0 until 30) {
var x16 = new Array[Int](10)
for (x13 <- 0 until 10) {
val x14 = x12 + x13
val x15 = x14 + 3
x16(x13) = x15
}
x17 ++= x16
}
val x22 = x17.apply(0)
val x23 = println(x22)

-- vertical transformation

(VFT) No producers found for TP(Sym(5),SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4)))))

(VFT) No producers found for TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))

(VFT) No producers found for TP(Sym(11),SimpleLoop(Const(30),Sym(6),FlattenElem(Block(Sym(10)))))

(VFT) No producers found for TP(Sym(10),SimpleLoop(Const(10),Sym(7),ArrayElem(Block(Sym(9)))))

(VFT) No producers found for TP(Sym(17),SimpleLoop(Const(30),Sym(12),FlattenElem(Block(Sym(16)))))

(VFT) No producers found for TP(Sym(16),SimpleLoop(Const(10),Sym(13),ArrayElem(Block(Sym(15)))))

(VFT) all vertically fused: 

-- after vertical transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
var x11 = new ArrayBuilder[Int]
for (x6 <- 0 until 30) {
var x10 = new Array[Int](10)
for (x7 <- 0 until 10) {
val x8 = x6 + x7
val x9 = x8 + 2
x10(x7) = x9
}
x11 ++= x10
}
val x20 = x11.apply(0)
val x21 = println(x20)
var x17 = new ArrayBuilder[Int]
for (x12 <- 0 until 30) {
var x16 = new Array[Int](10)
for (x13 <- 0 until 10) {
val x14 = x12 + x13
val x15 = x14 + 3
x16(x13) = x15
}
x17 ++= x16
}
val x22 = x17.apply(0)
val x23 = println(x22)

-- horizontal transformation
(HFT) Recording Sym(5), no fusion
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(11) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(5)))
(HFT) - remapping index: Sym(6) -> Sym(1)
(HFT) Fusing Sym(10) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4)))
(HFT) - remapping index: Sym(7) -> Sym(2)
(HFT) - new loop symbol: Sym(10) -> Sym(26)
(HFT) - new loop symbol: Sym(11) -> Sym(27)
(HFT) Fusing Sym(17) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(5), Sym(11)))
(HFT) - remapping index: Sym(12) -> Sym(1)
(HFT) Fusing Sym(16) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(10)))
(HFT) - remapping index: Sym(13) -> Sym(2)
(HFT) - new loop symbol: Sym(16) -> Sym(31)
(HFT) - new loop symbol: Sym(17) -> Sym(32)

(HFT) all horizontally fused: List(Sym(4), Sym(26), Sym(31))
List(Sym(5), Sym(27), Sym(32))

-- after horizontal transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
var x27 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x26 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x25 = x3 + 2
x26(x2) = x25
}
x27 ++= x26
}
val x28 = x27.apply(0)
val x29 = println(x28)
var x32 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x31 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x30 = x3 + 3
x31(x2) = x30
}
x32 ++= x31
}
val x33 = x32.apply(0)
val x34 = println(x33)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(5)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(4))))))
TTP(List(Sym(27)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(26))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(26))))))
TTP(List(Sym(32)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(31))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(31))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(3))))))
TTP(List(Sym(26)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(25))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(25))))))
TTP(List(Sym(31)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(30))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(30))))))

var x5 = new ArrayBuilder[Int]
var x27 = new ArrayBuilder[Int]
var x32 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
var x26 = new Array[Int](10)
var x31 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x25 = x3 + 2
val x30 = x3 + 3
x4(x2) = x3
x26(x2) = x25
x31(x2) = x30
}
x5 ++= x4
x27 ++= x26
x32 ++= x31
}
val x18 = x5.apply(0)
val x19 = println(x18)
val x28 = x27.apply(0)
val x29 = println(x28)
val x33 = x32.apply(0)
val x34 = println(x33)
-- done
