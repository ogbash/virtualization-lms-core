-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(5),Reflect(Print(Sym(4)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),NumericPlus(Sym(6),Const(1)))
TP(Sym(8),SimpleLoop(Sym(4),Sym(6),ArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayLength(Sym(8)))
TP(Sym(10),Reflect(Print(Sym(9)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5))))
TP(Sym(11),NumericPlus(Sym(0),Const(4)))
TP(Sym(13),NumericPlus(Sym(12),Const(1)))
TP(Sym(14),SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(14)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10))))
TP(Sym(17),Reify(Sym(16),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10), Sym(16))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
val x5 = println(x4)
var x8 = new Array[Int](x4)
for (x6 <- 0 until x4) {
val x7 = x6 + 1
x8(x6) = x7
}
val x9 = x8.length
val x10 = println(x9)
val x11 = x0 + 4
var x14 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x12 + 1
x14(x12) = x13
}
val x15 = x14.length
val x16 = println(x15)

-- vertical transformation
nonflat: List(List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(3): List()
(VFT)  Loop Sym(3) is consumer of 


nonflat: List(List((Sym(8),Some(TP(Sym(8),SimpleLoop(Sym(4),Sym(6),ArrayElem(Block(Sym(7)))))))), List((Sym(7),Some(TP(Sym(7),NumericPlus(Sym(6),Const(1)))))), List((Sym(6),None)), List((Sym(4),Some(TP(Sym(4),ArrayLength(Sym(3)))))), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))))
+++deps of Sym(8): List(Sym(3))
(VFT)  Loop Sym(8) is consumer of 


B
nonflat: List(List((Sym(14),Some(TP(Sym(14),SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(13)))))))), List((Sym(13),Some(TP(Sym(13),NumericPlus(Sym(12),Const(1)))))), List((Sym(12),None)), List((Sym(11),Some(TP(Sym(11),NumericPlus(Sym(0),Const(4)))))), List((Sym(0),None)))
+++deps of Sym(14): List()
(VFT)  Loop Sym(14) is consumer of 


C

-- after vertical transformation
val x18 = println(100)
val x20 = println(100)
val x11 = x0 + 4
var x14 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x12 + 1
x14(x12) = x13
}
val x15 = x14.length
val x21 = println(x15)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(14)): (Sym(11),(Sym(14),Sym(12),None))

-- after horizontal transformation
val x11 = x0 + 4
var x14 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x12 + 1
x14(x12) = x13
}
val x15 = x14.length
val x18 = println(100)
val x20 = println(100)
val x21 = println(x15)
-- done
