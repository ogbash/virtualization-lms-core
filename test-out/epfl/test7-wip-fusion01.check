-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),NumericTimes(Sym(2),Sym(1)))
TP(Sym(4),NumericTimes(Sym(1),Sym(3)))
TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),OrderingGT(Sym(8),Const(50)))
TP(Sym(10),BooleanNegate(Sym(9)))
TP(Sym(11),NumericPlus(Sym(8),Const(2)))
TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11)))))
TP(Sym(13),ArrayLength(Sym(12)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(15),Reify(Sym(14),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14))))

-- before transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x6 = x5.length
var x12 = new ArrayBuilder[Int]
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x9 = x8 > 50
val x10 = !x9
val x11 = x8 + 2
if (x10) x12 += x11
}
val x13 = x12.length
val x14 = println(x13)

-- vertical transformation

(VFT)  starting loop fusion of producer:
      TP(Sym(20),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(19)))))
(VFT)  into consumer:
      TP(Sym(25),SimpleLoop(Sym(21),Sym(22),ArrayIfElem(Sym(10),Block(Sym(24)))))
(VFT)  original consumer:
      TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11)))))
(VFT)  original producerStms:
      TP(Sym(17),NumericPlus(Sym(16),Const(1)))
      TP(Sym(18),NumericTimes(Sym(17),Sym(16)))
      TP(Sym(19),NumericTimes(Sym(16),Sym(18)))

(VFT)  reindexed producerStms (prodIndex: Sym(16) -> consumerIndex: Sym(22)):
      TP(Sym(28),NumericPlus(Sym(22),Const(1)))
      TP(Sym(29),NumericTimes(Sym(28),Sym(22)))
      TP(Sym(30),NumericTimes(Sym(22),Sym(29)))

(VFT)  original consuming:
      TP(Sym(24),NumericPlus(Sym(23),Const(2)))
      TP(Sym(25),SimpleLoop(Sym(21),Sym(22),ArrayIfElem(Sym(10),Block(Sym(24)))))
      TP(Sym(26),OrderingGT(Sym(23),Const(50)))
      TP(Sym(27),BooleanNegate(Sym(26)))
      TP(Sym(23),ArrayIndex(Sym(20),Sym(22)))

(VFT)  fused consuming (SimpleIndex: List(Sym(23)) -> collectSym: Sym(30)):
      TP(Sym(31),NumericPlus(Sym(30),Const(2)))
      TP(Sym(32),SimpleLoop(Sym(21),Sym(22),ArrayIfElem(Sym(27),Block(Sym(31)))))
      TP(Sym(33),OrderingGT(Sym(30),Const(50)))
      TP(Sym(34),BooleanNegate(Sym(33)))
      TP(Sym(23),ArrayIndex(Sym(20),Sym(22)))

(VFT)  fusion successful! Fused consumer loop: TP(Sym(35),SimpleLoop(Const(100),Sym(22),ArrayIfElem(Sym(34),Block(Sym(31)))))

-- after vertical transformation
var x35 = new ArrayBuilder[Int]
for (x22 <- 0 until 100) {
val x28 = x22 + 1
val x29 = x28 * x22
val x30 = x22 * x29
val x31 = x30 + 2
val x33 = x30 > 50
val x34 = !x33
if (x34) x35 += x31
}
val x36 = x35.length
val x37 = println(x36)

-- horizontal transformation
(HFT)  Recording loop: (Const(100),(Sym(35),Sym(22),None))

-- after horizontal transformation
var x35 = new ArrayBuilder[Int]
for (x22 <- 0 until 100) {
val x28 = x22 + 1
val x29 = x28 * x22
val x30 = x22 * x29
val x31 = x30 + 2
val x33 = x30 > 50
val x34 = !x33
if (x34) x35 += x31
}
val x36 = x35.length
val x39 = println(x36)
-- done
