-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(7),NumericPlus(Sym(6),Const(1)))
TP(Sym(8),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayIndex(Sym(3),Const(0)))
TP(Sym(10),Reflect(Print(Sym(9)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(11),ArrayIndex(Sym(8),Const(0)))
TP(Sym(12),Reflect(Print(Sym(11)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(10))))
TP(Sym(13),Reify(Sym(12),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(10), Sym(12))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x9 = x3.apply(0)
val x10 = println(x9)
val x4 = x3.length
var x8 = new Array[Int](x4)
for (x5 <- 0 until x4) {
val x6 = x3.apply(x5)
val x7 = x6 + 1
x8(x5) = x7
}
val x11 = x8.apply(0)
val x12 = println(x11)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))

(VFT) Fusing consumer TP(Sym(8),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(7))))) with real producer: Sym(3)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) all vertically fused: List(Sym(3), Sym(15))

-- after vertical transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x9 = x3.apply(0)
val x10 = println(x9)
var x15 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x14 = x2 + 1
x15(x1) = x14
}
val x16 = x15.apply(0)
val x17 = println(x16)

-- horizontal transformation
(HFT) Recording Sym(3), no fusion
(HFT) Fusing Sym(15) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(15)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(3), Sym(15))

-- after horizontal transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x9 = x3.apply(0)
val x10 = println(x9)
var x15 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x14 = x2 + 1
x15(x1) = x14
}
val x16 = x15.apply(0)
val x17 = println(x16)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(3)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(2))))))
TTP(List(Sym(15)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(14))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(14))))))

var x3 = new Array[Int](100)
var x15 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x14 = x2 + 1
x3(x1) = x2
x15(x1) = x14
}
val x9 = x3.apply(0)
val x10 = println(x9)
val x16 = x15.apply(0)
val x17 = println(x16)
-- done
