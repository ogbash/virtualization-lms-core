-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(7),NumericPlus(Sym(6),Const(2)))
TP(Sym(8),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(7)))))
TP(Sym(10),OrderingGT(Sym(9),Const(10)))
TP(Sym(11),ArrayIndex(Sym(3),Sym(9)))
TP(Sym(12),NumericPlus(Sym(11),Const(3)))
TP(Sym(13),SimpleLoop(Sym(4),Sym(9),ArrayIfElem(Sym(10),Block(Sym(12)))))
TP(Sym(16),ArrayIndex(Sym(3),Sym(14)))
TP(Sym(17),NumericPlus(Sym(15),Sym(16)))
TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))
TP(Sym(19),SimpleLoop(Sym(4),Sym(14),FlattenElem(Block(Sym(18)))))
TP(Sym(20),ArrayIndex(Sym(8),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(22),ArrayIndex(Sym(13),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(21))))
TP(Sym(24),ArrayIndex(Sym(19),Const(0)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(21), Sym(23))))
TP(Sym(26),Reify(Sym(25),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(21), Sym(23), Sym(25))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x8 = new Array[Int](x4)
for (x5 <- 0 until x4) {
val x6 = x3.apply(x5)
val x7 = x6 + 2
x8(x5) = x7
}
val x20 = x8.apply(0)
val x21 = println(x20)
var x13 = new ArrayBuilder[Int]
for (x9 <- 0 until x4) {
val x10 = x9 > 10
val x11 = x3.apply(x9)
val x12 = x11 + 3
if (x10) x13 += x12
}
val x22 = x13.apply(0)
val x23 = println(x22)
var x19 = new ArrayBuilder[Array[Int]]
for (x14 <- 0 until x4) {
val x16 = x3.apply(x14)
var x18 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x17 = x15 + x16
x18(x15) = x17
}
x19 ++= x18
}
val x24 = x19.apply(0)
val x25 = println(x24)

-- vertical transformation
(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
(VFT) Fusing consumer TP(Sym(8),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(7))))) with real producer: Sym(3)
(VFT) SimpleCollect+Any fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) Fusing consumer TP(Sym(13),SimpleLoop(Sym(4),Sym(9),ArrayIfElem(Sym(10),Block(Sym(12))))) with real producer: Sym(3)
(VFT) SimpleCollect+Any fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) Fusing consumer TP(Sym(19),SimpleLoop(Sym(4),Sym(14),FlattenElem(Block(Sym(18))))) with real producer: Sym(3)
(VFT) SimpleCollect+Any fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) No producers found for TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))

-- after vertical transformation
var x28 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x27 = x2 + 2
x28(x1) = x27
}
val x29 = x28.apply(0)
val x30 = println(x29)
var x33 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x31 = x1 > 10
val x2 = x1 + 1
val x32 = x2 + 3
if (x31) x33 += x32
}
val x34 = x33.apply(0)
val x35 = println(x34)
var x38 = new ArrayBuilder[Array[Int]]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
var x37 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x36 = x15 + x2
x37(x15) = x36
}
x38 ++= x37
}
val x39 = x38.apply(0)
val x40 = println(x39)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(28)): (Const(100),(Sym(28),Sym(1),None))
(HFT)  Loop Sym(33) fused with Sym(28), common index: Sym(1)
(HFT)  Loop Sym(38) fused with Sym(28), common index: Sym(1)
(HFT)  Recording new loop (prev. Sym(37)): (Const(10),(Sym(37),Sym(15),None))

-- after horizontal transformation
var x28 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x27 = x2 + 2
x28(x1) = x27
}
val x29 = x28.apply(0)
val x30 = println(x29)
var x33 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x31 = x1 > 10
val x2 = x1 + 1
val x32 = x2 + 3
if (x31) x33 += x32
}
val x34 = x33.apply(0)
val x35 = println(x34)
var x38 = new ArrayBuilder[Array[Int]]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
var x37 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x36 = x15 + x2
x37(x15) = x36
}
x38 ++= x37
}
val x39 = x38.apply(0)
val x40 = println(x39)
-- done
