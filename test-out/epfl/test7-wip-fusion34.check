-- full graph
TP(Sym(3),NumericPlus(Sym(1),Sym(2)))
TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(10),NumericPlus(Sym(8),Sym(9)))
TP(Sym(11),SimpleLoop(Sym(8),Sym(9),ArrayElem(Block(Sym(10)))))
TP(Sym(12),SimpleLoop(Sym(6),Sym(7),FlattenElem(Block(Sym(11)))))
TP(Sym(13),ArrayLength(Sym(12)))
TP(Sym(15),ArrayIndex(Sym(12),Sym(14)))
TP(Sym(16),NumericPlus(Sym(15),Const(4)))
TP(Sym(17),SimpleLoop(Sym(13),Sym(14),ArrayElem(Block(Sym(16)))))
TP(Sym(18),ArrayIndex(Sym(5),Const(0)))
TP(Sym(19),Reflect(Print(Sym(18)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(20),ArrayIndex(Sym(12),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19))))
TP(Sym(22),ArrayIndex(Sym(17),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19), Sym(21))))
TP(Sym(24),Reify(Sym(23),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(19), Sym(21), Sym(23))))

-- before transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
val x6 = x5.length
var x12 = new ArrayBuilder[Int]
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
var x11 = new Array[Int](x8)
for (x9 <- 0 until x8) {
val x10 = x8 + x9
x11(x9) = x10
}
x12 ++= x11
}
val x20 = x12.apply(0)
val x21 = println(x20)
val x13 = x12.length
var x17 = new Array[Int](x13)
for (x14 <- 0 until x13) {
val x15 = x12.apply(x14)
val x16 = x15 + 4
x17(x14) = x16
}
val x22 = x17.apply(0)
val x23 = println(x22)

-- vertical transformation

(VFT) No producers found for TP(Sym(5),SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4)))))

(VFT) No producers found for TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))

(VFT) Fusing consumer TP(Sym(12),SimpleLoop(Sym(6),Sym(7),FlattenElem(Block(Sym(11))))) with real producer: Sym(5)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(4).
(VFT) MultiCollect+Any fusion: fuse consumer with inner array of producer.
(VFT) General fusion: remap index to Sym(2), SimpleIndex to Sym(3).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) No producers found for TP(Sym(11),SimpleLoop(Sym(8),Sym(9),ArrayElem(Block(Sym(10)))))

(VFT) Fusing consumer TP(Sym(17),SimpleLoop(Sym(13),Sym(14),ArrayElem(Block(Sym(16))))) with real producer: Sym(28) (was Sym(12))
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(27).
(VFT) MultiCollect+Any fusion: fuse consumer with inner array of producer.
(VFT) General fusion: remap index to Sym(2), SimpleIndex to Sym(26).
(VFT) MultiCollect+Any fusion: fuse consumer with inner array of producer.
(VFT) General fusion: remap index to Sym(9), SimpleIndex to Sym(25).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) all vertically fused: List(Sym(28), Sym(35))
List(Sym(26), Sym(33))
List(Sym(28), Sym(5))
List(Sym(4), Sym(34), Sym(27))

-- after vertical transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
var x28 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x27 = new ArrayBuilder[Int]
for (x2 <- 0 until 10) {
val x3 = x1 + x2
var x26 = new Array[Int](x3)
for (x9 <- 0 until x3) {
val x25 = x3 + x9
x26(x9) = x25
}
x27 ++= x26
}
x28 ++= x27
}
val x29 = x28.apply(0)
val x30 = println(x29)
var x35 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x34 = new ArrayBuilder[Int]
for (x2 <- 0 until 10) {
val x3 = x1 + x2
var x33 = new Array[Int](x3)
for (x9 <- 0 until x3) {
val x25 = x3 + x9
val x32 = x25 + 4
x33(x9) = x32
}
x34 ++= x33
}
x35 ++= x34
}
val x36 = x35.apply(0)
val x37 = println(x36)

-- horizontal transformation
(HFT) Recording Sym(5), no fusion
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(28) with containing fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(28), Sym(5)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(27) with containing fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(34), Sym(27)))
(HFT) - already using same index Sym(2)
(HFT) Recording Sym(26), no fusion
(HFT) Fusing Sym(35) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(28), Sym(5)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(34) with containing fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(34), Sym(27)))
(HFT) - already using same index Sym(2)
(HFT) Fusing Sym(33) with containing fusion set FusedSet(shape = Sym(3), indexSym = Sym(9), loopSyms = List(Sym(26), Sym(33)))
(HFT) - already using same index Sym(9)

(HFT) all horizontally fused: List(Sym(26), Sym(33))
List(Sym(4), Sym(27), Sym(34))
List(Sym(5), Sym(28), Sym(35))

-- after horizontal transformation
var x5 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
x5 ++= x4
}
val x18 = x5.apply(0)
val x19 = println(x18)
var x28 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x27 = new ArrayBuilder[Int]
for (x2 <- 0 until 10) {
val x3 = x1 + x2
var x26 = new Array[Int](x3)
for (x9 <- 0 until x3) {
val x25 = x3 + x9
x26(x9) = x25
}
x27 ++= x26
}
x28 ++= x27
}
val x29 = x28.apply(0)
val x30 = println(x29)
var x35 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x34 = new ArrayBuilder[Int]
for (x2 <- 0 until 10) {
val x3 = x1 + x2
var x33 = new Array[Int](x3)
for (x9 <- 0 until x3) {
val x25 = x3 + x9
val x32 = x25 + 4
x33(x9) = x32
}
x34 ++= x33
}
x35 ++= x34
}
val x36 = x35.apply(0)
val x37 = println(x36)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(5)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(4))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(4))))))
TTP(List(Sym(28)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(27))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(27))))))
TTP(List(Sym(35)),List(SimpleLoop(Const(30),Sym(1),FlattenElem(Block(Sym(34))))),SimpleFatLoop(Const(30),Sym(1),List(FlattenElem(Block(Sym(34))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(3))))))
TTP(List(Sym(27)),List(SimpleLoop(Const(10),Sym(2),FlattenElem(Block(Sym(26))))),SimpleFatLoop(Const(10),Sym(2),List(FlattenElem(Block(Sym(26))))))
TTP(List(Sym(34)),List(SimpleLoop(Const(10),Sym(2),FlattenElem(Block(Sym(33))))),SimpleFatLoop(Const(10),Sym(2),List(FlattenElem(Block(Sym(33))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(26)),List(SimpleLoop(Sym(3),Sym(9),ArrayElem(Block(Sym(25))))),SimpleFatLoop(Sym(3),Sym(9),List(ArrayElem(Block(Sym(25))))))
TTP(List(Sym(33)),List(SimpleLoop(Sym(3),Sym(9),ArrayElem(Block(Sym(32))))),SimpleFatLoop(Sym(3),Sym(9),List(ArrayElem(Block(Sym(32))))))

var x5 = new ArrayBuilder[Int]
var x28 = new ArrayBuilder[Int]
var x35 = new ArrayBuilder[Int]
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
var x27 = new ArrayBuilder[Int]
var x34 = new ArrayBuilder[Int]
for (x2 <- 0 until 10) {
val x3 = x1 + x2
var x26 = new Array[Int](x3)
var x33 = new Array[Int](x3)
for (x9 <- 0 until x3) {
val x25 = x3 + x9
val x32 = x25 + 4
x26(x9) = x25
x33(x9) = x32
}
x4(x2) = x3
x27 ++= x26
x34 ++= x33
}
x5 ++= x4
x28 ++= x27
x35 ++= x34
}
val x18 = x5.apply(0)
val x19 = println(x18)
val x29 = x28.apply(0)
val x30 = println(x29)
val x36 = x35.apply(0)
val x37 = println(x36)
-- done
