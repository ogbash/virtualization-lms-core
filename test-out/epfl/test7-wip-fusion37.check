-- full graph
TP(Sym(3),NumericPlus(Sym(1),Sym(2)))
TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))
TP(Sym(9),NumericPlus(Sym(7),Sym(8)))
TP(Sym(10),NumericPlus(Sym(9),Const(2)))
TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayIndex(Sym(11),Const(0)))
TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12)))))
TP(Sym(16),NumericPlus(Sym(14),Sym(15)))
TP(Sym(17),NumericPlus(Sym(16),Const(3)))
TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))
TP(Sym(19),ArrayIndex(Sym(18),Const(0)))
TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayIndex(Sym(6),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),ArrayIndex(Sym(13),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(25),ArrayIndex(Sym(20),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24), Sym(26))))

-- before transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x13 = new Array[Int](30)
for (x7 <- 0 until 30) {
var x11 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x9 = x7 + x8
val x10 = x9 + 2
x11(x8) = x10
}
val x12 = x11.apply(0)
x13(x7) = x12
}
val x23 = x13.apply(0)
val x24 = println(x23)
var x20 = new Array[Int](30)
for (x14 <- 0 until 30) {
var x18 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x16 = x14 + x15
val x17 = x16 + 3
x18(x15) = x17
}
val x19 = x18.apply(0)
x20(x14) = x19
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- vertical transformation

(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))

(VFT) No producers found for TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))

(VFT) No producers found for TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12)))))

(VFT) No producers found for TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10)))))

(VFT) No producers found for TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19)))))

(VFT) No producers found for TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))

(VFT) all vertically fused: 

-- after vertical transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x13 = new Array[Int](30)
for (x7 <- 0 until 30) {
var x11 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x9 = x7 + x8
val x10 = x9 + 2
x11(x8) = x10
}
val x12 = x11.apply(0)
x13(x7) = x12
}
val x23 = x13.apply(0)
val x24 = println(x23)
var x20 = new Array[Int](30)
for (x14 <- 0 until 30) {
var x18 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x16 = x14 + x15
val x17 = x16 + 3
x18(x15) = x17
}
val x19 = x18.apply(0)
x20(x14) = x19
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- horizontal transformation
(HFT) Recording Sym(6), no fusion
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(13) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6)))
(HFT) - remapping index: Sym(7) -> Sym(1)
(HFT) Fusing Sym(11) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4)))
(HFT) - remapping index: Sym(8) -> Sym(2)
(HFT) - new loop symbol: Sym(11) -> Sym(29)
(HFT) - new loop symbol: Sym(13) -> Sym(31)
(HFT) Fusing Sym(20) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6), Sym(13)))
(HFT) - remapping index: Sym(14) -> Sym(1)
(HFT) Fusing Sym(18) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(11)))
(HFT) - remapping index: Sym(15) -> Sym(2)
(HFT) - new loop symbol: Sym(18) -> Sym(35)
(HFT) - new loop symbol: Sym(20) -> Sym(37)

(HFT) all horizontally fused: List(Sym(4), Sym(29), Sym(35))
List(Sym(6), Sym(31), Sym(37))

-- after horizontal transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x31 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x29 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x28 = x3 + 2
x29(x2) = x28
}
val x30 = x29.apply(0)
x31(x1) = x30
}
val x32 = x31.apply(0)
val x33 = println(x32)
var x37 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x35 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x34 = x3 + 3
x35(x2) = x34
}
val x36 = x35.apply(0)
x37(x1) = x36
}
val x38 = x37.apply(0)
val x39 = println(x38)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(6)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(5))))))
TTP(List(Sym(31)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(30))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(30))))))
TTP(List(Sym(37)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(36))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(36))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(3))))))
TTP(List(Sym(29)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(28))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(28))))))
TTP(List(Sym(35)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(34))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(34))))))

var x6 = new Array[Int](30)
var x31 = new Array[Int](30)
var x37 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
var x29 = new Array[Int](10)
var x35 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x28 = x3 + 2
val x34 = x3 + 3
x4(x2) = x3
x29(x2) = x28
x35(x2) = x34
}
val x5 = x4.apply(0)
val x30 = x29.apply(0)
val x36 = x35.apply(0)
x6(x1) = x5
x31(x1) = x30
x37(x1) = x36
}
val x21 = x6.apply(0)
val x22 = println(x21)
val x32 = x31.apply(0)
val x33 = println(x32)
val x38 = x37.apply(0)
val x39 = println(x38)
-- done
