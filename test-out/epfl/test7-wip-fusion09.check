-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(7),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(8),NumericPlus(Sym(6),Sym(7)))
TP(Sym(9),SimpleLoop(Sym(4),Sym(6),ArrayElem(Block(Sym(8)))))
TP(Sym(10),SimpleLoop(Sym(4),Sym(5),FlattenElem(Block(Sym(9)))))
TP(Sym(11),ArrayIndex(Sym(10),Const(0)))
TP(Sym(12),Reflect(Print(Sym(11)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(13),Reify(Sym(12),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(12))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x10 = new ArrayBuilder[Int]
for (x5 <- 0 until x4) {
val x7 = x3.apply(x5)
var x9 = new Array[Int](x4)
for (x6 <- 0 until x4) {
val x8 = x6 + x7
x9(x6) = x8
}
x10 ++= x9
}
val x11 = x10.apply(0)
val x12 = println(x11)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))

(VFT) Fusing consumer TP(Sym(10),SimpleLoop(Sym(4),Sym(5),FlattenElem(Block(Sym(9))))) with real producer: Sym(3)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) No producers found for TP(Sym(9),SimpleLoop(Sym(4),Sym(6),ArrayElem(Block(Sym(8)))))

(VFT) all vertically fused: List(Sym(3), Sym(16))

-- after vertical transformation
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
var x15 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x14 = x6 + x2
x15(x6) = x14
}
x16 ++= x15
}
val x17 = x16.apply(0)
val x18 = println(x17)

-- horizontal transformation
(HFT) Recording Sym(16), no fusion
(HFT) Recording Sym(15), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
var x15 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x14 = x6 + x2
x15(x6) = x14
}
x16 ++= x15
}
val x17 = x16.apply(0)
val x18 = println(x17)

-- fusion
var x16 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
var x15 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x14 = x6 + x2
x15(x6) = x14
}
x16 ++= x15
}
val x17 = x16.apply(0)
val x18 = println(x17)
-- done
