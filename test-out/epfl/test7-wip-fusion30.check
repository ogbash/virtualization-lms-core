-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayIndex(Sym(3),Const(0)))
TP(Sym(5),Reflect(Print(Sym(4)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),NumericPlus(Sym(6),Const(2)))
TP(Sym(8),SimpleLoop(Const(100),Sym(6),ArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayIndex(Sym(8),Const(0)))
TP(Sym(10),Reflect(Print(Sym(9)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5))))
TP(Sym(11),ArrayLength(Sym(3)))
TP(Sym(13),ArrayIndex(Sym(3),Sym(12)))
TP(Sym(14),OrderingGT(Sym(13),Const(50)))
TP(Sym(15),NumericPlus(Sym(9),Const(1)))
TP(Sym(16),SimpleLoop(Sym(11),Sym(12),ArrayIfElem(Sym(14),Block(Sym(15)))))
TP(Sym(17),ArrayLength(Sym(16)))
TP(Sym(18),Reflect(Print(Sym(17)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10))))
TP(Sym(19),Reify(Sym(18),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(5), Sym(10), Sym(18))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
var x8 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x7 = x6 + 2
x8(x6) = x7
}
val x9 = x8.apply(0)
val x10 = println(x9)
val x11 = x3.length
val x15 = x9 + 1
var x16 = new ArrayBuilder[Int]
for (x12 <- 0 until x11) {
val x13 = x3.apply(x12)
val x14 = x13 > 50
if (x14) x16 += x15
}
val x17 = x16.length
val x18 = println(x17)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))

(VFT) No producers found for TP(Sym(8),SimpleLoop(Const(100),Sym(6),ArrayElem(Block(Sym(7)))))

(VFT) Fusing consumer TP(Sym(16),SimpleLoop(Sym(11),Sym(12),ArrayIfElem(Sym(14),Block(Sym(15))))) with real producer: Sym(3)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do.

-- after vertical transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
var x8 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x7 = x6 + 2
x8(x6) = x7
}
val x9 = x8.apply(0)
val x10 = println(x9)
val x15 = x9 + 1
var x21 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x20 = x2 > 50
if (x20) x21 += x15
}
val x22 = x21.length
val x23 = println(x22)

-- horizontal transformation
(HFT) Recording Sym(3), no fusion
(HFT) The candidate Sym(8) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(21))) because the existing set depends on Sym(8)
(HFT) Recording Sym(8), no fusion
(HFT) Fusing Sym(21) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(21)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(21), Sym(3))

-- after horizontal transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.apply(0)
val x5 = println(x4)
var x8 = new Array[Int](100)
for (x6 <- 0 until 100) {
val x7 = x6 + 2
x8(x6) = x7
}
val x9 = x8.apply(0)
val x10 = println(x9)
val x15 = x9 + 1
var x21 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x20 = x2 > 50
if (x20) x21 += x15
}
val x22 = x21.length
val x23 = println(x22)
-- done
