-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),NumericTimes(Sym(4),Const(4)))
TP(Sym(6),ArrayLength(Sym(3)))
TP(Sym(8),ArrayIndex(Sym(3),Sym(7)))
TP(Sym(9),NumericTimes(Sym(8),Const(5)))
TP(Sym(10),NumericPlus(Sym(9),Sym(4)))
TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(11)))
TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))
TP(Sym(15),NumericTimes(Sym(14),Const(6)))
TP(Sym(16),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(15)))))
TP(Sym(17),ArrayIndex(Sym(16),Const(0)))
TP(Sym(18),NumericTimes(Sym(5),Sym(17)))
TP(Sym(19),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(18)))))
TP(Sym(20),ArrayLength(Sym(19)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(22),Reify(Sym(21),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(21))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x6 = x3.length
var x19 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 * 4
var x11 = new Array[Int](x6)
for (x7 <- 0 until x6) {
val x8 = x3.apply(x7)
val x9 = x8 * 5
val x10 = x9 + x4
x11(x7) = x10
}
val x12 = x11.length
var x16 = new Array[Int](x12)
for (x13 <- 0 until x12) {
val x14 = x11.apply(x13)
val x15 = x14 * 6
x16(x13) = x15
}
val x17 = x16.apply(0)
val x18 = x5 * x17
x19(x4) = x18
}
val x20 = x19.length
val x21 = println(x20)

-- vertical transformation
nonflat: List(List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(3): List()
(VFT)  Loop Sym(3) is consumer of 


nonflat: List(List((Sym(19),Some(TP(Sym(19),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(18)))))))), List((Sym(18),Some(TP(Sym(18),NumericTimes(Sym(5),Sym(17)))))), List((Sym(17),Some(TP(Sym(17),ArrayIndex(Sym(16),Const(0)))))), List((Sym(16),Some(TP(Sym(16),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(15)))))))), List((Sym(15),Some(TP(Sym(15),NumericTimes(Sym(14),Const(6)))))), List((Sym(14),Some(TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))))), List((Sym(13),None)), List((Sym(12),Some(TP(Sym(12),ArrayLength(Sym(11)))))), List((Sym(11),Some(TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))))), List((Sym(10),Some(TP(Sym(10),NumericPlus(Sym(9),Sym(4)))))), List((Sym(9),Some(TP(Sym(9),NumericTimes(Sym(8),Const(5)))))), List((Sym(8),Some(TP(Sym(8),ArrayIndex(Sym(3),Sym(7)))))), List((Sym(7),None)), List((Sym(6),Some(TP(Sym(6),ArrayLength(Sym(3)))))), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(5),Some(TP(Sym(5),NumericTimes(Sym(4),Const(4)))))), List((Sym(4),None)))
+++deps of Sym(19): List(Sym(3), Sym(16), Sym(11))
(VFT)  Loop Sym(19) is consumer of 


nonflat: List(List((Sym(11),Some(TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))))), List((Sym(10),Some(TP(Sym(10),NumericPlus(Sym(9),Sym(4)))))), List((Sym(4),None)), List((Sym(9),Some(TP(Sym(9),NumericTimes(Sym(8),Const(5)))))), List((Sym(8),Some(TP(Sym(8),ArrayIndex(Sym(3),Sym(7)))))), List((Sym(7),None)), List((Sym(6),Some(TP(Sym(6),ArrayLength(Sym(3)))))), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))))))
+++deps of Sym(11): List(Sym(3))
(VFT)  Loop Sym(11) is consumer of 


B
nonflat: List(List((Sym(16),Some(TP(Sym(16),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(15)))))))), List((Sym(15),Some(TP(Sym(15),NumericTimes(Sym(14),Const(6)))))), List((Sym(14),Some(TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))))), List((Sym(13),None)), List((Sym(12),Some(TP(Sym(12),ArrayLength(Sym(11)))))), List((Sym(11),Some(TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))))))
+++deps of Sym(16): List(Sym(3), Sym(11))
(VFT)  Loop Sym(16) is consumer of 
(Sym(11),1)

+++recording horizontal requirement: Sym(16) -> Sym(11)
fuse with TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))
index: subst += (Sym(13) -> Sym(7)) 
prodRes: simpleIndexReplacements += (Sym(14) -> Sym(10)) 
B

-- after vertical transformation
val x29 = println(100)

-- horizontal transformation

-- after horizontal transformation
val x29 = println(100)
-- done
