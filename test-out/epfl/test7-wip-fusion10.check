-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),NumericTimes(Sym(4),Const(4)))
TP(Sym(6),ArrayLength(Sym(3)))
TP(Sym(8),ArrayIndex(Sym(3),Sym(7)))
TP(Sym(9),NumericTimes(Sym(8),Const(5)))
TP(Sym(10),NumericPlus(Sym(9),Sym(4)))
TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(11)))
TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))
TP(Sym(15),NumericTimes(Sym(14),Const(6)))
TP(Sym(16),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(15)))))
TP(Sym(17),ArrayIndex(Sym(16),Const(0)))
TP(Sym(18),NumericTimes(Sym(5),Sym(17)))
TP(Sym(19),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(18)))))
TP(Sym(20),ArrayIndex(Sym(19),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(22),Reify(Sym(21),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(21))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x6 = x3.length
var x19 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 * 4
var x11 = new Array[Int](x6)
for (x7 <- 0 until x6) {
val x8 = x3.apply(x7)
val x9 = x8 * 5
val x10 = x9 + x4
x11(x7) = x10
}
val x12 = x11.length
var x16 = new Array[Int](x12)
for (x13 <- 0 until x12) {
val x14 = x11.apply(x13)
val x15 = x14 * 6
x16(x13) = x15
}
val x17 = x16.apply(0)
val x18 = x5 * x17
x19(x4) = x18
}
val x20 = x19.apply(0)
val x21 = println(x20)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))

(VFT) No producers found for TP(Sym(19),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(18)))))

(VFT) Sym(11) not fused with Sym(3) because not in same level/scope.
(VFT) No producers found for TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))

(VFT) Fusing consumer TP(Sym(16),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(15))))) with real producer: Sym(23) (was Sym(11))
(VFT) General fusion: remap index to Sym(7), SimpleIndex to Sym(10).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) all vertically fused: List(Sym(25), Sym(23))

-- after vertical transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x28 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 * 4
var x25 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x3.apply(x7)
val x9 = x8 * 5
val x10 = x9 + x4
val x24 = x10 * 6
x25(x7) = x24
}
val x26 = x25.apply(0)
val x27 = x5 * x26
x28(x4) = x27
}
val x29 = x28.apply(0)
val x30 = println(x29)

-- horizontal transformation
(HFT) Recording Sym(3), no fusion
(HFT) The candidate Sym(28) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3))) because the candidate set depends on Sym(3)
(HFT) Recording Sym(28), no fusion
(HFT) Recording Sym(25), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x28 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 * 4
var x25 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x3.apply(x7)
val x9 = x8 * 5
val x10 = x9 + x4
val x24 = x10 * 6
x25(x7) = x24
}
val x26 = x25.apply(0)
val x27 = x5 * x26
x28(x4) = x27
}
val x29 = x28.apply(0)
val x30 = println(x29)

-- fusion
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x28 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 * 4
var x25 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x3.apply(x7)
val x9 = x8 * 5
val x10 = x9 + x4
val x24 = x10 * 6
x25(x7) = x24
}
val x26 = x25.apply(0)
val x27 = x5 * x26
x28(x4) = x27
}
val x29 = x28.apply(0)
val x30 = println(x29)
-- done
