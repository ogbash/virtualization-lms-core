-- full graph
TP(Sym(3),NumericPlus(Sym(2),Sym(1)))
TP(Sym(4),SimpleLoop(Const(100),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),SimpleLoop(Const(90),Sym(1),ArrayElem(Block(Sym(5)))))
TP(Sym(8),NumericPlus(Sym(7),Const(2)))
TP(Sym(9),SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(8)))))
TP(Sym(10),ArrayIndex(Sym(6),Const(0)))
TP(Sym(11),Reflect(Print(Sym(10)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(12),ArrayIndex(Sym(9),Const(0)))
TP(Sym(13),Reflect(Print(Sym(12)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(11))))
TP(Sym(14),Reify(Sym(13),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(11), Sym(13))))

-- before transformation
var x6 = new Array[Int](90)
for (x1 <- 0 until 90) {
var x4 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x10 = x6.apply(0)
val x11 = println(x10)
var x9 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x7 + 2
x9(x7) = x8
}
val x12 = x9.apply(0)
val x13 = println(x12)

-- vertical transformation

(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(90),Sym(1),ArrayElem(Block(Sym(5)))))

(VFT) No producers found for TP(Sym(4),SimpleLoop(Const(100),Sym(2),ArrayElem(Block(Sym(3)))))

(VFT) No producers found for TP(Sym(9),SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(8)))))

-- after vertical transformation
var x6 = new Array[Int](90)
for (x1 <- 0 until 90) {
var x4 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x10 = x6.apply(0)
val x11 = println(x10)
var x9 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x7 + 2
x9(x7) = x8
}
val x12 = x9.apply(0)
val x13 = println(x12)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(4)): (Const(100),(Sym(4),Sym(2),None))
(HFT)  Recording new loop (prev. Sym(6)): (Const(90),(Sym(6),Sym(1),None))
(HFT)  Recording new loop (prev. Sym(9)): (Const(100),(Sym(9),Sym(7),None))

-- after horizontal transformation
var x6 = new Array[Int](90)
for (x1 <- 0 until 90) {
var x4 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + x1
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x10 = x6.apply(0)
val x11 = println(x10)
var x9 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x7 + 2
x9(x7) = x8
}
val x12 = x9.apply(0)
val x13 = println(x12)
-- done
