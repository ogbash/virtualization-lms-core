-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Sym(0),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(7),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(6)))))
TP(Sym(8),ArrayLength(Sym(7)))
TP(Sym(9),Reflect(Print(Sym(8)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(10),NumericPlus(Sym(0),Const(2)))
TP(Sym(12),ArrayIndex(Sym(3),Sym(11)))
TP(Sym(13),SimpleLoop(Sym(10),Sym(11),ArrayElem(Block(Sym(12)))))
TP(Sym(14),ArrayLength(Sym(13)))
TP(Sym(15),Reflect(Print(Sym(14)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(9))))
TP(Sym(17),NumericPlus(Sym(16),Const(1)))
TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))
TP(Sym(19),ArrayLength(Sym(18)))
TP(Sym(21),ArrayIndex(Sym(18),Sym(20)))
TP(Sym(22),SimpleLoop(Sym(19),Sym(20),ArrayElem(Block(Sym(21)))))
TP(Sym(24),ArrayIndex(Sym(22),Sym(23)))
TP(Sym(25),SimpleLoop(Sym(19),Sym(23),ArrayElem(Block(Sym(24)))))
TP(Sym(27),ArrayIndex(Sym(18),Sym(26)))
TP(Sym(28),SimpleLoop(Const(90),Sym(26),ArrayElem(Block(Sym(27)))))
TP(Sym(30),ArrayIndex(Sym(28),Sym(29)))
TP(Sym(31),SimpleLoop(Sym(19),Sym(29),ArrayElem(Block(Sym(30)))))
TP(Sym(33),ArrayIndex(Sym(18),Sym(32)))
TP(Sym(34),SimpleLoop(Const(100),Sym(32),ArrayElem(Block(Sym(33)))))
TP(Sym(35),ArrayIndex(Sym(25),Const(1)))
TP(Sym(36),Reflect(Print(Sym(35)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(9), Sym(15))))
TP(Sym(37),ArrayIndex(Sym(31),Const(1)))
TP(Sym(38),Reflect(Print(Sym(37)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(9), Sym(15), Sym(36))))
TP(Sym(39),ArrayIndex(Sym(34),Const(1)))
TP(Sym(40),Reflect(Print(Sym(39)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(9), Sym(15), Sym(36), Sym(38))))
TP(Sym(41),Reify(Sym(40),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(9), Sym(15), Sym(36), Sym(38), Sym(40))))

-- before transformation
var x3 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x7 = new Array[Int](x4)
for (x5 <- 0 until x4) {
val x6 = x3.apply(x5)
x7(x5) = x6
}
val x8 = x7.length
val x9 = println(x8)
val x10 = x0 + 2
var x13 = new Array[Int](x10)
for (x11 <- 0 until x10) {
val x12 = x3.apply(x11)
x13(x11) = x12
}
val x14 = x13.length
val x15 = println(x14)
var x18 = new Array[Int](100)
for (x16 <- 0 until 100) {
val x17 = x16 + 1
x18(x16) = x17
}
val x19 = x18.length
var x22 = new Array[Int](x19)
for (x20 <- 0 until x19) {
val x21 = x18.apply(x20)
x22(x20) = x21
}
var x25 = new Array[Int](x19)
for (x23 <- 0 until x19) {
val x24 = x22.apply(x23)
x25(x23) = x24
}
val x35 = x25.apply(1)
val x36 = println(x35)
var x28 = new Array[Int](90)
for (x26 <- 0 until 90) {
val x27 = x18.apply(x26)
x28(x26) = x27
}
var x31 = new Array[Int](x19)
for (x29 <- 0 until x19) {
val x30 = x28.apply(x29)
x31(x29) = x30
}
val x37 = x31.apply(1)
val x38 = println(x37)
var x34 = new Array[Int](100)
for (x32 <- 0 until 100) {
val x33 = x18.apply(x32)
x34(x32) = x33
}
val x39 = x34.apply(1)
val x40 = println(x39)

-- vertical transformation
nonflat: List(List((Sym(3),Some(TP(Sym(3),SimpleLoop(Sym(0),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)), List((Sym(0),None)))
+++deps of Sym(3): List()
(VFT)  Loop Sym(3) is consumer of 


C
nonflat: List(List((Sym(7),Some(TP(Sym(7),SimpleLoop(Sym(4),Sym(5),ArrayElem(Block(Sym(6)))))))), List((Sym(6),Some(TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))))), List((Sym(5),None)), List((Sym(4),Some(TP(Sym(4),ArrayLength(Sym(3)))))), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Sym(0),Sym(1),ArrayElem(Block(Sym(2)))))))))
+++deps of Sym(7): List(Sym(3))
(VFT)  Loop Sym(7) is consumer of 
(Sym(3),1)

+++recording horizontal requirement: Sym(7) -> Sym(3)
fuse with TP(Sym(3),SimpleLoop(Sym(0),Sym(1),ArrayElem(Block(Sym(2)))))
index: subst += (Sym(5) -> Sym(1)) 
prodRes: simpleIndexReplacements += (Sym(6) -> Sym(2)) 
C
nonflat: List(List((Sym(13),Some(TP(Sym(13),SimpleLoop(Sym(10),Sym(11),ArrayElem(Block(Sym(12)))))))), List((Sym(12),Some(TP(Sym(12),ArrayIndex(Sym(3),Sym(11)))))), List((Sym(11),None)), List((Sym(3),Some(TP(Sym(3),SimpleLoop(Sym(0),Sym(1),ArrayElem(Block(Sym(2)))))))), List((Sym(10),Some(TP(Sym(10),NumericPlus(Sym(0),Const(2)))))), List((Sym(0),None)))
+++deps of Sym(13): List(Sym(3))
(VFT)  Loop Sym(13) is consumer of 


C
nonflat: List(List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))), List((Sym(17),Some(TP(Sym(17),NumericPlus(Sym(16),Const(1)))))), List((Sym(16),None)))
+++deps of Sym(18): List()
(VFT)  Loop Sym(18) is consumer of 


nonflat: List(List((Sym(22),Some(TP(Sym(22),SimpleLoop(Sym(19),Sym(20),ArrayElem(Block(Sym(21)))))))), List((Sym(21),Some(TP(Sym(21),ArrayIndex(Sym(18),Sym(20)))))), List((Sym(20),None)), List((Sym(19),Some(TP(Sym(19),ArrayLength(Sym(18)))))), List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))))
+++deps of Sym(22): List(Sym(18))
(VFT)  Loop Sym(22) is consumer of 
(Sym(18),1)

+++recording horizontal requirement: Sym(22) -> Sym(18)
fuse with TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))
index: subst += (Sym(20) -> Sym(16)) 
prodRes: simpleIndexReplacements += (Sym(21) -> Sym(17)) 
B
nonflat: List(List((Sym(25),Some(TP(Sym(25),SimpleLoop(Sym(19),Sym(23),ArrayElem(Block(Sym(24)))))))), List((Sym(24),Some(TP(Sym(24),ArrayIndex(Sym(22),Sym(23)))))), List((Sym(23),None)), List((Sym(22),Some(TP(Sym(22),SimpleLoop(Sym(19),Sym(20),ArrayElem(Block(Sym(21)))))))), List((Sym(19),Some(TP(Sym(19),ArrayLength(Sym(18)))))), List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))))
+++deps of Sym(25): List(Sym(22), Sym(18))
(VFT)  Loop Sym(25) is consumer of 
(Sym(22),2)

+++recording horizontal requirement: Sym(25) -> Sym(22)
fuse with TP(Sym(22),SimpleLoop(Sym(19),Sym(20),ArrayElem(Block(Sym(21)))))
index: subst += (Sym(23) -> Sym(20)) 
prodRes: simpleIndexReplacements += (Sym(24) -> Sym(21)) 
B
nonflat: List(List((Sym(28),Some(TP(Sym(28),SimpleLoop(Const(90),Sym(26),ArrayElem(Block(Sym(27)))))))), List((Sym(27),Some(TP(Sym(27),ArrayIndex(Sym(18),Sym(26)))))), List((Sym(26),None)), List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))))
+++deps of Sym(28): List(Sym(18))
(VFT)  Loop Sym(28) is consumer of 


nonflat: List(List((Sym(31),Some(TP(Sym(31),SimpleLoop(Sym(19),Sym(29),ArrayElem(Block(Sym(30)))))))), List((Sym(30),Some(TP(Sym(30),ArrayIndex(Sym(28),Sym(29)))))), List((Sym(29),None)), List((Sym(28),Some(TP(Sym(28),SimpleLoop(Const(90),Sym(26),ArrayElem(Block(Sym(27)))))))), List((Sym(19),Some(TP(Sym(19),ArrayLength(Sym(18)))))), List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))))
+++deps of Sym(31): List(Sym(28), Sym(18))
(VFT)  Loop Sym(31) is consumer of 


B
nonflat: List(List((Sym(34),Some(TP(Sym(34),SimpleLoop(Const(100),Sym(32),ArrayElem(Block(Sym(33)))))))), List((Sym(33),Some(TP(Sym(33),ArrayIndex(Sym(18),Sym(32)))))), List((Sym(32),None)), List((Sym(18),Some(TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))))))
+++deps of Sym(34): List(Sym(18))
(VFT)  Loop Sym(34) is consumer of 
(Sym(18),3)

+++recording horizontal requirement: Sym(34) -> Sym(18)
fuse with TP(Sym(18),SimpleLoop(Const(100),Sym(16),ArrayElem(Block(Sym(17)))))
index: subst += (Sym(32) -> Sym(16)) 
prodRes: simpleIndexReplacements += (Sym(33) -> Sym(17)) 

-- after vertical transformation
var x3 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x42 = new Array[Int](x4)
for (x1 <- 0 until x4) {
val x2 = x1 + 1
x42(x1) = x2
}
val x43 = x42.length
val x44 = println(x43)
val x10 = x0 + 2
var x13 = new Array[Int](x10)
for (x11 <- 0 until x10) {
val x12 = x3.apply(x11)
x13(x11) = x12
}
val x14 = x13.length
val x45 = println(x14)
var x18 = new Array[Int](100)
for (x16 <- 0 until 100) {
val x17 = x16 + 1
x18(x16) = x17
}
val x21 = x18.apply(x20)
var x46 = new Array[Int](100)
for (x16 <- 0 until 100) {
x46(x16) = x21
}
val x47 = x46.apply(1)
val x48 = println(x47)
var x28 = new Array[Int](90)
for (x26 <- 0 until 90) {
val x27 = x18.apply(x26)
x28(x26) = x27
}
var x49 = new Array[Int](100)
for (x29 <- 0 until 100) {
val x30 = x28.apply(x29)
x49(x29) = x30
}
val x50 = x49.apply(1)
val x51 = println(x50)
val x52 = x18.apply(1)
val x53 = println(x52)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(3)): (Sym(0),(Sym(3),Sym(1),None))
(HFT)  Recording new loop (prev. Sym(42)): (Sym(4),(Sym(42),Sym(1),None))
(HFT)  Recording new loop (prev. Sym(13)): (Sym(10),(Sym(13),Sym(11),None))
(HFT)  Recording new loop (prev. Sym(18)): (Const(100),(Sym(18),Sym(16),None))
(HFT)  Loop Sym(46) not fused with Sym(18) because it depends on it
(HFT)  Recording new loop (prev. Sym(28)): (Const(90),(Sym(28),Sym(26),None))
(HFT)  Loop Sym(49) not fused with Sym(18) because it depends on it

-- after horizontal transformation
var x3 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x42 = new Array[Int](x4)
for (x1 <- 0 until x4) {
val x2 = x1 + 1
x42(x1) = x2
}
val x43 = x42.length
val x44 = println(x43)
val x10 = x0 + 2
var x13 = new Array[Int](x10)
for (x11 <- 0 until x10) {
val x12 = x3.apply(x11)
x13(x11) = x12
}
val x14 = x13.length
val x45 = println(x14)
var x18 = new Array[Int](100)
for (x16 <- 0 until 100) {
val x17 = x16 + 1
x18(x16) = x17
}
val x21 = x18.apply(x20)
var x46 = new Array[Int](100)
for (x16 <- 0 until 100) {
x46(x16) = x21
}
val x47 = x46.apply(1)
val x48 = println(x47)
var x28 = new Array[Int](90)
for (x26 <- 0 until 90) {
val x27 = x18.apply(x26)
x28(x26) = x27
}
var x49 = new Array[Int](100)
for (x29 <- 0 until 100) {
val x30 = x28.apply(x29)
x49(x29) = x30
}
val x50 = x49.apply(1)
val x51 = println(x50)
val x52 = x18.apply(1)
val x53 = println(x52)
-- done
