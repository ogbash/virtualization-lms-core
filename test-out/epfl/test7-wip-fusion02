-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),NumericTimes(Sym(2),Sym(1)))
TP(Sym(4),NumericTimes(Sym(1),Sym(3)))
TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),OrderingGT(Sym(8),Const(50)))
TP(Sym(10),BooleanNegate(Sym(9)))
TP(Sym(11),NumericPlus(Sym(8),Const(2)))
TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11)))))
TP(Sym(13),ArrayLength(Sym(12)))
TP(Sym(14),Reflect(Print(Sym(13)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(15),Reflect(Print(Sym(6)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14))))
TP(Sym(16),Reify(Sym(15),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(14), Sym(15))))

-- before transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x6 = x5.length
var x12 = new ArrayBuilder[Int]
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x9 = x8 > 50
val x10 = !x9
val x11 = x8 + 2
if (x10) x12 += x11
}
val x13 = x12.length
val x14 = println(x13)
val x15 = println(x6)

-- vertical transformation
nonflat: List(List((Sym(5),Some(TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))))), List((Sym(4),Some(TP(Sym(4),NumericTimes(Sym(1),Sym(3)))))), List((Sym(3),Some(TP(Sym(3),NumericTimes(Sym(2),Sym(1)))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(5): List()
(VFT)  Loop Sym(5) is consumer of 


nonflat: List(List((Sym(12),Some(TP(Sym(12),SimpleLoop(Sym(6),Sym(7),ArrayIfElem(Sym(10),Block(Sym(11)))))))), List((Sym(11),Some(TP(Sym(11),NumericPlus(Sym(8),Const(2)))))), List((Sym(10),Some(TP(Sym(10),BooleanNegate(Sym(9)))))), List((Sym(9),Some(TP(Sym(9),OrderingGT(Sym(8),Const(50)))))), List((Sym(8),Some(TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))))), List((Sym(7),None)), List((Sym(6),Some(TP(Sym(6),ArrayLength(Sym(5)))))), List((Sym(5),Some(TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))))))
+++deps of Sym(12): List(Sym(5))

-- after vertical transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
var x17 = new ArrayBuilder[Int]
for (x7 <- 0 until 100) {
val x8 = x5.apply(x7)
val x9 = x8 > 50
val x10 = !x9
val x11 = x8 + 2
if (x10) x17 += x11
}
val x18 = x17.length
val x19 = println(x18)
val x20 = println(100)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(5)): (Const(100),(Sym(5),Sym(1),None))
(HFT)  Loop Sym(17) not fused with Sym(5) because it depends on it

-- after horizontal transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
var x17 = new ArrayBuilder[Int]
for (x7 <- 0 until 100) {
val x8 = x5.apply(x7)
val x9 = x8 > 50
val x10 = !x9
val x11 = x8 + 2
if (x10) x17 += x11
}
val x18 = x17.length
val x19 = println(x18)
val x20 = println(100)
-- done
