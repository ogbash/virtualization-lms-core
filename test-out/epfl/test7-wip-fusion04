-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),NumericTimes(Sym(2),Sym(1)))
TP(Sym(4),NumericTimes(Sym(1),Sym(3)))
TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),NumericPlus(Sym(8),Sym(6)))
TP(Sym(10),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(10)))
TP(Sym(12),Reflect(Print(Sym(11)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(13),Reify(Sym(12),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(12))))

-- before transformation
var x5 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x5(x1) = x4
}
val x6 = x5.length
var x10 = new Array[Int](x6)
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x9 = x8 + x6
x10(x7) = x9
}
val x11 = x10.length
val x12 = println(x11)

-- vertical transformation
nonflat: List(List((Sym(5),Some(TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))))), List((Sym(4),Some(TP(Sym(4),NumericTimes(Sym(1),Sym(3)))))), List((Sym(3),Some(TP(Sym(3),NumericTimes(Sym(2),Sym(1)))))), List((Sym(2),Some(TP(Sym(2),NumericPlus(Sym(1),Const(1)))))), List((Sym(1),None)))
+++deps of Sym(5): List()
(VFT)  Loop Sym(5) is consumer of 


nonflat: List(List((Sym(10),Some(TP(Sym(10),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(9)))))))), List((Sym(9),Some(TP(Sym(9),NumericPlus(Sym(8),Sym(6)))))), List((Sym(8),Some(TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))))), List((Sym(7),None)), List((Sym(6),Some(TP(Sym(6),ArrayLength(Sym(5)))))), List((Sym(5),Some(TP(Sym(5),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(4)))))))))
+++deps of Sym(10): List(Sym(5))
(VFT)  Loop Sym(10) is consumer of 


B

-- after vertical transformation
val x16 = println(100)

-- horizontal transformation

-- after horizontal transformation
val x16 = println(100)
-- done
