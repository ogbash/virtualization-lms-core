-- full graph
TP(Sym(2),NumericPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(7),OrderingGT(Sym(6),Const(50)))
TP(Sym(8),NumericTimes(Sym(6),Const(2)))
TP(Sym(9),SimpleLoop(Sym(4),Sym(5),ArrayIfElem(Sym(7),Block(Sym(8)))))
TP(Sym(11),ArrayIndex(Sym(3),Sym(10)))
TP(Sym(12),OrderingLT(Sym(11),Const(20)))
TP(Sym(13),NumericTimes(Sym(11),Const(3)))
TP(Sym(14),SimpleLoop(Sym(4),Sym(10),ArrayIfElem(Sym(12),Block(Sym(13)))))
TP(Sym(15),ArrayLength(Sym(9)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(17),ArrayLength(Sym(14)))
TP(Sym(18),Reflect(Print(Sym(17)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(16))))
TP(Sym(19),Reify(Sym(18),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(16), Sym(18))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x4 = x3.length
var x9 = new ArrayBuilder[Int]
for (x5 <- 0 until x4) {
val x6 = x3.apply(x5)
val x7 = x6 > 50
val x8 = x6 * 2
if (x7) x9 += x8
}
val x15 = x9.length
val x16 = println(x15)
var x14 = new ArrayBuilder[Int]
for (x10 <- 0 until x4) {
val x11 = x3.apply(x10)
val x12 = x11 < 20
val x13 = x11 * 3
if (x12) x14 += x13
}
val x17 = x14.length
val x18 = println(x17)

-- vertical transformation
(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
(VFT) Fusing consumer TP(Sym(9),SimpleLoop(Sym(4),Sym(5),ArrayIfElem(Sym(7),Block(Sym(8))))) with real producer: Sym(3)
(VFT) SimpleCollect+Any fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) Fusing consumer TP(Sym(14),SimpleLoop(Sym(4),Sym(10),ArrayIfElem(Sym(12),Block(Sym(13))))) with real producer: Sym(3)
(VFT) SimpleCollect+Any fusion: remap index to Sym(1), SimpleIndex to Sym(2).

-- after vertical transformation
var x22 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x20 = x2 > 50
val x21 = x2 * 2
if (x20) x22 += x21
}
val x23 = x22.length
val x24 = println(x23)
var x27 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x25 = x2 < 20
val x26 = x2 * 3
if (x25) x27 += x26
}
val x28 = x27.length
val x29 = println(x28)

-- horizontal transformation
(HFT)  Recording new loop (prev. Sym(22)): (Const(100),(Sym(22),Sym(1),None))
(HFT)  Loop Sym(27) fused with Sym(22), common index: Sym(1)

-- after horizontal transformation
var x22 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x20 = x2 > 50
val x21 = x2 * 2
if (x20) x22 += x21
}
val x23 = x22.length
val x24 = println(x23)
var x27 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x25 = x2 < 20
val x26 = x2 * 3
if (x25) x27 += x26
}
val x28 = x27.length
val x29 = println(x28)
-- done
